"""
–§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
"""
import math
from typing import Dict, Any, List, Optional
from services.models import Quote
from utils.localization import get_text


def format_quote_message(quote: Quote, show_tags: bool = True, user_id: int = 0) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    
    Args:
        quote: –û–±—ä–µ–∫—Ç —Ü–∏—Ç–∞—Ç—ã
        show_tags: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Ç–µ–≥–∏
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–∏—Ç–∞—Ç–æ–π
    """
    message = f'üí≠ "{quote.content}"\n\n‚Äî {quote.author}'
    
    if show_tags and quote.tags:
        tags_label = get_text(user_id, "formatters.tags_label")
        message += f'\n\n{tags_label} {", ".join(quote.tags)}'
    
    return message


def format_quote_dict_message(quote_dict: Dict[str, Any], index: Optional[int] = None, user_id: int = 0) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    
    Args:
        quote_dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ü–∏—Ç–∞—Ç—ã
        index: –ù–æ–º–µ—Ä —Ü–∏—Ç–∞—Ç—ã (–¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏)
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–∏—Ç–∞—Ç–æ–π
    """
    content = quote_dict.get('content', get_text(user_id, "formatters.no_content"))
    author = quote_dict.get('author', get_text(user_id, "formatters.unknown_author"))
    tags = quote_dict.get('tags', [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ü–∏—Ç–∞—Ç—ã, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    prefix = f"{index}. " if index is not None else ""
    
    message = f'{prefix}üí≠ "{content}"\n\n‚Äî {author}'
    
    if tags:
        tags_label = get_text(user_id, "formatters.tags_label")
        message += f'\n\n{tags_label} {", ".join(tags)}'
    
    return message


def format_favorites_list(favorites: List[Dict[str, Any]], page: int = 0, per_page: int = 3, user_id: int = 0) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    
    Args:
        favorites: –°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
        per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç
    """
    if not favorites:
        return get_text(user_id, "favorites_empty")
    
    total_pages = math.ceil(len(favorites) / per_page)
    start_idx = page * per_page
    end_idx = min(start_idx + per_page, len(favorites))
    
    page_favorites = favorites[start_idx:end_idx]
    message = f"{get_text(user_id, 'favorites_title')} {get_text(user_id, 'formatters.page_info').format(page=page + 1, total_pages=total_pages)}:\n\n"
    
    for i, quote in enumerate(page_favorites, 1):
        message += format_quote_dict_message(quote, i, user_id) + "\n\n"
    
    total_text = get_text(user_id, "formatters.total_favorites")
    message += total_text.format(count=len(favorites))
    
    return message


def truncate_text(text: str, max_length: int = 100) -> str:
    """
    –û–±—Ä–µ–∑–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        
    Returns:
        str: –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    """
    if len(text) <= max_length:
        return text
    
    return text[:max_length - 3] + "..."


def format_success_message(action: str, user_id: int = 0, quote_author: Optional[str] = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
    
    Args:
        action: –í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        quote_author: –ê–≤—Ç–æ—Ä —Ü–∏—Ç–∞—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    """
    author_info = f' ‚Äî {quote_author}' if quote_author else ''
    
    message_keys = {
        'added_to_favorites': 'formatters.success_added_to_favorites',
        'removed_from_favorites': 'formatters.success_removed_from_favorites',
        'cleared_favorites': 'formatters.success_cleared_favorites',
        'already_in_favorites': 'formatters.success_already_in_favorites'
    }
    
    key = message_keys.get(action, 'formatters.success_added_to_favorites')
    message = get_text(user_id, key)
    
    return message.format(author_info=author_info)


def format_error_message(error_type: str, user_id: int = 0) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    
    Args:
        error_type: –¢–∏–ø –æ—à–∏–±–∫–∏
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    error_keys = {
        'quote_not_found': 'formatters.error_quote_not_found',
        'already_in_favorites': 'formatters.error_already_in_favorites',
        'not_in_favorites': 'formatters.error_not_in_favorites',
        'storage_error': 'formatters.error_storage_error',
        'api_error': 'formatters.error_api_error'
    }
    
    key = error_keys.get(error_type, 'formatters.error_api_error')
    return get_text(user_id, key)

#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞
"""
import json
import os
import logging
from typing import Dict, Any, Optional, Union
from pathlib import Path

logger = logging.getLogger(__name__)

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
SUPPORTED_LANGUAGES = {
    'en': 'üá∫üá∏ English',
    'ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π'
}

DEFAULT_LANGUAGE = 'en'

class LocalizationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏"""
    
    def __init__(self, locales_dir: str = "locales"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        
        Args:
            locales_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        self.locales_dir = Path(locales_dir)
        self.translations: Dict[str, Dict[str, Any]] = {}
        self.user_languages: Dict[int, str] = {}  # user_id -> language_code
        self._load_translations()
    
    def _load_translations(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        try:
            for language_code in SUPPORTED_LANGUAGES.keys():
                file_path = self.locales_dir / f"{language_code}.json"
                if file_path.exists():
                    with open(file_path, 'r', encoding='utf-8') as f:
                        self.translations[language_code] = json.load(f)
                    logger.info(f"Loaded translations for language: {language_code}")
                else:
                    logger.warning(f"Translation file not found: {file_path}")
        except Exception as e:
            logger.error(f"Error loading translations: {e}")
    
    def set_user_language(self, user_id: int, language_code: str) -> bool:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            language_code: –ö–æ–¥ —è–∑—ã–∫–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —è–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        if language_code in SUPPORTED_LANGUAGES:
            self.user_languages[user_id] = language_code
            logger.info(f"Set language {language_code} for user {user_id}")
            return True
        return False
    
    def get_user_language(self, user_id: int) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –ö–æ–¥ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        return self.user_languages.get(user_id, DEFAULT_LANGUAGE)
    
    def get_text(self, user_id: int, key: str, **kwargs) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            key: –ö–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–º, –Ω–∞–ø—Ä–∏–º–µ—Ä 'keyboard.confirm')
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
            
        Returns:
            str: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        language = self.get_user_language(user_id)
        return self._get_translation(language, key, **kwargs)
    
    def _get_translation(self, language: str, key: str, **kwargs) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏ –∫–ª—é—á–∞
        
        Args:
            language: –ö–æ–¥ —è–∑—ã–∫–∞
            key: –ö–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            str: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —è–∑—ã–∫–∞
            translations = self.translations.get(language, {})
            
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'keyboard.confirm')
            keys = key.split('.')
            current = translations
            
            for k in keys:
                if isinstance(current, dict) and k in current:
                    current = current[k]
                else:
                    # Fallback –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
                    if language != DEFAULT_LANGUAGE:
                        return self._get_translation(DEFAULT_LANGUAGE, key, **kwargs)
                    else:
                        logger.warning(f"Translation key not found: {key}")
                        return f"[{key}]"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            if isinstance(current, str) and kwargs:
                return current.format(**kwargs)
            
            return str(current)
            
        except Exception as e:
            logger.error(f"Error getting translation for key '{key}': {e}")
            return f"[{key}]"
    
    def get_language_keyboard_data(self) -> Dict[str, str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        
        Returns:
            Dict[str, str]: –°–ª–æ–≤–∞—Ä—å {language_code: display_name}
        """
        return SUPPORTED_LANGUAGES.copy()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
localization_manager = LocalizationManager()

def get_text(user_id: int, key: str, **kwargs) -> str:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        key: –ö–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞
        **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        str: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    return localization_manager.get_text(user_id, key, **kwargs)

def set_user_language(user_id: int, language_code: str) -> bool:
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        language_code: –ö–æ–¥ —è–∑—ã–∫–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
    """
    return localization_manager.set_user_language(user_id, language_code)

def get_user_language(user_id: int) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        str: –ö–æ–¥ —è–∑—ã–∫–∞
    """
    return localization_manager.get_user_language(user_id)

def get_supported_languages() -> Dict[str, str]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
    
    Returns:
        Dict[str, str]: –°–ª–æ–≤–∞—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
    """
    return SUPPORTED_LANGUAGES.copy()

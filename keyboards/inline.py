"""
Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–æ—Ç–∞
"""
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Dict, Any, Optional
from utils.storage import is_quote_in_favorites
from utils.localization import get_text, get_supported_languages


def get_language_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —è–∑—ã–∫–∞–º–∏
    """
    buttons = []
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
    languages = get_supported_languages()
    
    for lang_code, lang_name in languages.items():
        buttons.append([
            InlineKeyboardButton(
                text=lang_name,
                callback_data=f"set_language_{lang_code}"
            )
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_quote_keyboard(quote_id: str, user_id: int, show_remove: bool = False) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ü–∏—Ç–∞—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    
    Args:
        quote_id: ID —Ü–∏—Ç–∞—Ç—ã
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
        show_remove: –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ü–∏—Ç–∞—Ç—ã
    """
    buttons = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–∏—Ç–∞—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    is_favorite = is_quote_in_favorites(user_id, quote_id)
    
    # –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    if is_favorite or show_remove:
        if show_remove:
            remove_text = get_text(user_id, "keyboard.remove_from_favorites")
            buttons.append([
                InlineKeyboardButton(
                    text=remove_text,
                    callback_data=f"remove_favorite_{quote_id}"
                )
            ])
        else:
            already_text = get_text(user_id, "keyboard.already_in_favorites")
            buttons.append([
                InlineKeyboardButton(
                    text=already_text,
                    callback_data=f"already_favorite_{quote_id}"
                )
            ])
    else:
        add_text = get_text(user_id, "keyboard.add_to_favorites")
        buttons.append([
            InlineKeyboardButton(
                text=add_text,
                callback_data=f"add_favorite_{quote_id}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ "–ï—â–µ —Ü–∏—Ç–∞—Ç–∞"
    another_text = get_text(user_id, "keyboard.another_quote")
    buttons.append([
        InlineKeyboardButton(
            text=another_text,
            callback_data="get_another_quote"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_favorites_navigation_keyboard(
    current_page: int = 0,
    total_pages: int = 1,
    quotes_on_page: Optional[List[Dict[str, Any]]] = None,
    user_id: int = 0
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–º —Ü–∏—Ç–∞—Ç–∞–º
    
    Args:
        current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 0)
        total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        quotes_on_page: –¶–∏—Ç–∞—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    """
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å —Ü–∏—Ç–∞—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
    if quotes_on_page:
        remove_text = get_text(user_id, "keyboard.remove_quote")
        for i, quote in enumerate(quotes_on_page):
            quote_id = quote.get('_id') or quote.get('id', '')
            if quote_id:
                buttons.append([
                    InlineKeyboardButton(
                        text=f"{remove_text} {i + 1}",
                        callback_data=f"remove_favorite_{quote_id}"
                    )
                ])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    
    if current_page > 0:
        prev_text = get_text(user_id, "keyboard.previous_page")
        nav_buttons.append(
            InlineKeyboardButton(
                text=prev_text,
                callback_data=f"favorites_page_{current_page - 1}"
            )
        )
    
    if current_page < total_pages - 1:
        next_text = get_text(user_id, "keyboard.next_page")
        nav_buttons.append(
            InlineKeyboardButton(
                text=next_text,
                callback_data=f"favorites_page_{current_page + 1}"
            )
        )
    
    if nav_buttons:
        buttons.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
    if quotes_on_page:
        clear_text = get_text(user_id, "keyboard.clear_all")
        buttons.append([
            InlineKeyboardButton(
                text=clear_text,
                callback_data="clear_all_favorites"
            )
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_confirmation_keyboard(action: str, quote_id: str = "", user_id: int = 0) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
    
    Args:
        action: –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        quote_id: ID —Ü–∏—Ç–∞—Ç—ã (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    confirm_text = get_text(user_id, "keyboard.confirm")
    cancel_text = get_text(user_id, "keyboard.cancel")
    
    buttons = [
        [
            InlineKeyboardButton(
                text=confirm_text,
                callback_data=f"confirm_{action}_{quote_id}" if quote_id else f"confirm_{action}"
            ),
            InlineKeyboardButton(
                text=cancel_text,
                callback_data="cancel_action"
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_delete_confirmation_keyboard(quote_id: str, user_id: int = 0) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    
    Args:
        quote_id: ID —Ü–∏—Ç–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    """
    confirm_text = get_text(user_id, "keyboard.confirm")
    cancel_text = get_text(user_id, "keyboard.cancel")
    
    buttons = [
        [
            InlineKeyboardButton(
                text=f"{confirm_text}",
                callback_data=f"confirm_delete_{quote_id}"
            ),
            InlineKeyboardButton(
                text=f"{cancel_text}",
                callback_data="cancel_delete"
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_clear_all_confirmation_keyboard(user_id: int = 0) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏
    """
    confirm_text = get_text(user_id, "keyboard.confirm")
    cancel_text = get_text(user_id, "keyboard.cancel")
    
    buttons = [
        [
            InlineKeyboardButton(
                text=f"üóëÔ∏è {confirm_text}",
                callback_data="confirm_clear_all"
            ),
            InlineKeyboardButton(
                text=f"‚ùå {cancel_text}",
                callback_data="cancel_clear_all"
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)




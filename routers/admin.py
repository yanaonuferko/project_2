"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞
"""
import logging
import asyncio
from typing import Union, cast, Optional
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from filters.admin_filter import AdminFilter
from states.admin_states import BroadcastState, BanState, UnbanState
from utils.logger import log_command_usage
from utils.storage import load_data, clear_user_favorites
from utils.user_management import (
    get_user_stats, get_all_user_ids, ban_user, unban_user, 
    is_user_banned, get_banned_users_list, get_user_info
)
from services.api_client import clear_cache, get_cache_stats
from keyboards.admin import (
    get_admin_main_keyboard, get_broadcast_confirmation_keyboard,
    get_ban_management_keyboard, get_ban_confirmation_keyboard,
    get_unban_confirmation_keyboard, get_back_to_admin_keyboard
)

router = Router()
logger = logging.getLogger(__name__)


# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏

@router.message(Command("admin"), AdminFilter())
async def cmd_admin(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /admin - –≥–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    log_command_usage(user_id, "admin")
    
    admin_text = (
        "üîê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = get_admin_main_keyboard(user_id)
    await message.answer(admin_text, reply_markup=keyboard)


@router.callback_query(F.data == "admin_main")
async def callback_admin_main(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not callback.from_user or not callback.message:
        return
        
    await state.clear()  # –û—á–∏—â–∞–µ–º –ª—é–±–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    
    admin_text = (
        "üîê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = get_admin_main_keyboard(callback.from_user.id)
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if hasattr(callback.message, 'edit_text'):
        await callback.message.edit_text(admin_text, reply_markup=keyboard)
    
    await callback.answer()


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

@router.message(Command("stats"), AdminFilter())
@router.callback_query(F.data == "admin_stats")
async def cmd_admin_stats(update: Union[Message, CallbackQuery], state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    if isinstance(update, CallbackQuery):
        user_id = update.from_user.id if update.from_user else 0
        is_callback = True
    else:
        user_id = update.from_user.id if update.from_user else 0
        is_callback = False
    
    log_command_usage(user_id, "stats")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_stats = get_user_stats()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–∏—Ç–∞—Ç–∞—Ö
        quotes_data = load_data()
        total_favorites = sum(len(favorites) for favorites in quotes_data.values())
        users_with_favorites = len([u for u in quotes_data.values() if u])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
        cache_stats = get_cache_stats()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        banned_count = len(get_banned_users_list())
        
        stats_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_stats.get('total_users', 0)}\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_stats.get('active_users', 0)}\n"
            f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {user_stats.get('recent_users', 0)}\n"
            f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {banned_count}\n\n"
            f"‚≠ê –í—Å–µ–≥–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç: {total_favorites}\n"
            f"üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏: {users_with_favorites}\n\n"
            f"üíæ –ö—ç—à: {cache_stats.get('valid_entries', 0)} –∑–∞–ø–∏—Å–µ–π\n"
            f"‚è∞ TTL –∫—ç—à–∞: {cache_stats.get('cache_ttl', 0)} —Å–µ–∫\n"
            f"üóëÔ∏è –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π: {cache_stats.get('expired_entries', 0)}"
        )
        
        keyboard = get_back_to_admin_keyboard(user_id)
        
        if is_callback and hasattr(update, 'message') and update.message:
            await update.message.edit_text(stats_text, reply_markup=keyboard)
            await update.answer()
        else:
            await update.answer(stats_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error getting admin stats: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        
        if is_callback:
            await update.answer(error_text, show_alert=True)
        else:
            await update.answer(error_text)


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

@router.callback_query(F.data == "admin_users")
async def callback_admin_users(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"""
    if not callback.from_user or not callback.message:
        return
        
    user_id = callback.from_user.id
    log_command_usage(user_id, "admin_users")
    
    try:
        quotes_data = load_data()
        
        if not quotes_data:
            users_text = "üìù –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —Ü–∏—Ç–∞—Ç–∞–º–∏"
        else:
            users_text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —Ü–∏—Ç–∞—Ç–∞–º–∏:\n\n"
            
            for user_id_str, favorites in quotes_data.items():
                favorites_count = len(favorites)
                banned_status = " (üö´ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)" if is_user_banned(int(user_id_str)) else ""
                users_text += f"üÜî {user_id_str}: {favorites_count} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö{banned_status}\n"
        
        keyboard = get_back_to_admin_keyboard(user_id)
        await callback.message.edit_text(users_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error getting users info: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö", show_alert=True)


# –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞

@router.callback_query(F.data == "admin_clear_cache")
async def callback_admin_clear_cache(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ API"""
    if not callback.from_user or not callback.message:
        return
        
    user_id = callback.from_user.id
    
    try:
        clear_cache()
        keyboard = get_back_to_admin_keyboard(user_id)
        await callback.message.edit_text("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!", reply_markup=keyboard)
        await callback.answer("–ö—ç—à –æ—á–∏—â–µ–Ω!")
        
    except Exception as e:
        logger.error(f"Error clearing cache: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞", show_alert=True)


# –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏

@router.message(Command("broadcast"), AdminFilter())
@router.callback_query(F.data == "admin_broadcast")
async def cmd_admin_broadcast(update: Union[Message, CallbackQuery], state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /broadcast - –Ω–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    if isinstance(update, CallbackQuery):
        user_id = update.from_user.id if update.from_user else 0
        is_callback = True
    else:
        user_id = update.from_user.id if update.from_user else 0
        is_callback = False
    
    log_command_usage(user_id, "broadcast")
    
    await state.set_state(BroadcastState.waiting_for_message)
    
    broadcast_text = (
        "üì¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.\n\n"
        "‚ö†Ô∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã! –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
    )
    
    if is_callback and hasattr(update, 'message') and update.message:
        await update.message.edit_text(broadcast_text)
        await update.answer()
    else:
        await update.answer(broadcast_text)


@router.message(BroadcastState.waiting_for_message)
async def process_broadcast_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not message.from_user:
        return
        
    user_id = message.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(broadcast_text=message.text or message.caption or "")
    await state.set_state(BroadcastState.waiting_for_confirmation)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    all_users = get_all_user_ids()
    banned_users = get_banned_users_list()
    target_users = len([uid for uid in all_users if uid not in banned_users])
    
    confirmation_text = (
        f"üì¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
        f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"{message.text or message.caption or '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'}\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {target_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(banned_users)}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:"
    )
    
    keyboard = get_broadcast_confirmation_keyboard(user_id)
    await message.answer(confirmation_text, reply_markup=keyboard)


@router.callback_query(F.data == "confirm_broadcast", BroadcastState.waiting_for_confirmation)
async def confirm_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not callback.from_user or not callback.message:
        return
        
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        broadcast_text = data.get('broadcast_text', '')
        
        if not broadcast_text:
            await callback.answer("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        all_users = get_all_user_ids()
        banned_users = get_banned_users_list()
        target_users = [uid for uid in all_users if uid not in banned_users]
        
        if not target_users:
            await callback.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        await callback.message.edit_text(
            f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(target_users)}"
        )
        await callback.answer()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        bot = callback.bot
        sent_count = 0
        failed_count = 0
        
        for user_id_target in target_users:
            try:
                await bot.send_message(user_id_target, broadcast_text)
                sent_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(0.05)
            except Exception as e:
                failed_count += 1
                logger.warning(f"Failed to send broadcast to user {user_id_target}: {e}")
        
        # –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        result_text = (
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
            f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(target_users)}"
        )
        
        keyboard = get_back_to_admin_keyboard(user_id)
        await callback.message.edit_text(result_text, reply_markup=keyboard)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error during broadcast: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ", show_alert=True)
        await state.clear()


@router.callback_query(F.data == "cancel_broadcast", BroadcastState.waiting_for_confirmation)
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not callback.from_user or not callback.message:
        return
        
    await state.clear()
    
    keyboard = get_back_to_admin_keyboard(callback.from_user.id)
    await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=keyboard)
    await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


@router.callback_query(F.data == "edit_broadcast", BroadcastState.waiting_for_confirmation)
async def edit_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not callback.message:
        return
        
    await state.set_state(BroadcastState.waiting_for_message)
    
    await callback.message.edit_text(
        "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
    )
    await callback.answer()


# –°–∏—Å—Ç–µ–º–∞ –±–∞–Ω–æ–≤

@router.callback_query(F.data == "admin_bans")
async def callback_admin_bans(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∞–º–∏"""
    if not callback.from_user or not callback.message:
        return
        
    user_id = callback.from_user.id
    
    banned_users = get_banned_users_list()
    
    bans_text = (
        f"üö´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏\n\n"
        f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(banned_users)}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = get_ban_management_keyboard(user_id)
    await callback.message.edit_text(bans_text, reply_markup=keyboard)
    await callback.answer()


@router.message(Command("ban"), AdminFilter())
@router.callback_query(F.data == "admin_ban_user")
async def cmd_ban_user(update: Union[Message, CallbackQuery], state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /ban - –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    if isinstance(update, CallbackQuery):
        user_id = update.from_user.id if update.from_user else 0
        is_callback = True
    else:
        user_id = update.from_user.id if update.from_user else 0
        is_callback = False
    
    log_command_usage(user_id, "ban")
    
    await state.set_state(BanState.waiting_for_user_id)
    
    ban_text = (
        "üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.\n\n"
        "–ü—Ä–∏–º–µ—Ä: 123456789"
    )
    
    if is_callback and hasattr(update, 'message') and update.message:
        await update.message.edit_text(ban_text)
        await update.answer()
    else:
        await update.answer(ban_text)


@router.message(BanState.waiting_for_user_id)
async def process_ban_user_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    if not message.from_user or not message.text:
        return
        
    try:
        target_user_id = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º —Å–µ–±—è
        if target_user_id == message.from_user.id:
            await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–∏ —Å–µ–±—è!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if is_user_banned(target_user_id):
            await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = get_user_info(target_user_id)
        
        await state.update_data(target_user_id=target_user_id)
        await state.set_state(BanState.waiting_for_confirmation)
        
        if user_info:
            username = user_info.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            first_name = user_info.get('first_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            confirmation_text = (
                f"üö´ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_user_id}\n"
                f"–ò–º—è: {first_name}\n"
                f"Username: @{username}\n\n"
                f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É:"
            )
        else:
            confirmation_text = (
                f"üö´ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_user_id}\n"
                f"(–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)\n\n"
                f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É:"
            )
        
        keyboard = get_ban_confirmation_keyboard(message.from_user.id, target_user_id)
        await message.answer(confirmation_text, reply_markup=keyboard)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logger.error(f"Error processing ban user ID: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("confirm_ban_"), BanState.waiting_for_confirmation)
async def confirm_ban_user(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not callback.from_user or not callback.data or not callback.message:
        return
        
    try:
        target_user_id = int(callback.data.replace("confirm_ban_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        data = await state.get_data()
        stored_user_id = data.get('target_user_id')
        
        if target_user_id != stored_user_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID", show_alert=True)
            return
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if ban_user(target_user_id):
            success_text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!"
            keyboard = get_back_to_admin_keyboard(callback.from_user.id)
            await callback.message.edit_text(success_text, reply_markup=keyboard)
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        else:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error confirming ban: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ", show_alert=True)
        await state.clear()


@router.callback_query(F.data == "cancel_ban", BanState.waiting_for_confirmation)
async def cancel_ban_user(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not callback.from_user or not callback.message:
        return
        
    await state.clear()
    
    keyboard = get_ban_management_keyboard(callback.from_user.id)
    await callback.message.edit_text("‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=keyboard)
    await callback.answer("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


# –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

@router.message(Command("unban"), AdminFilter())
@router.callback_query(F.data == "admin_unban_user")
async def cmd_unban_user(update: Union[Message, CallbackQuery], state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /unban - –Ω–∞—á–∞–ª–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    if isinstance(update, CallbackQuery):
        user_id = update.from_user.id if update.from_user else 0
        is_callback = True
    else:
        user_id = update.from_user.id if update.from_user else 0
        is_callback = False
    
    log_command_usage(user_id, "unban")
    
    await state.set_state(UnbanState.waiting_for_user_id)
    
    unban_text = (
        "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.\n\n"
        "–ü—Ä–∏–º–µ—Ä: 123456789"
    )
    
    if is_callback and hasattr(update, 'message') and update.message:
        await update.message.edit_text(unban_text)
        await update.answer()
    else:
        await update.answer(unban_text)


@router.message(UnbanState.waiting_for_user_id)
async def process_unban_user_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    if not message.from_user or not message.text:
        return
        
    try:
        target_user_id = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not is_user_banned(target_user_id):
            await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
            return
        
        await state.update_data(target_user_id=target_user_id)
        await state.set_state(UnbanState.waiting_for_confirmation)
        
        confirmation_text = (
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_user_id}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É:"
        )
        
        keyboard = get_unban_confirmation_keyboard(message.from_user.id, target_user_id)
        await message.answer(confirmation_text, reply_markup=keyboard)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logger.error(f"Error processing unban user ID: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("confirm_unban_"), UnbanState.waiting_for_confirmation)
async def confirm_unban_user(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not callback.from_user or not callback.data or not callback.message:
        return
        
    try:
        target_user_id = int(callback.data.replace("confirm_unban_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        data = await state.get_data()
        stored_user_id = data.get('target_user_id')
        
        if target_user_id != stored_user_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID", show_alert=True)
            return
        
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if unban_user(target_user_id):
            success_text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!"
            keyboard = get_back_to_admin_keyboard(callback.from_user.id)
            await callback.message.edit_text(success_text, reply_markup=keyboard)
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        else:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error confirming unban: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ", show_alert=True)
        await state.clear()


@router.callback_query(F.data == "cancel_unban", UnbanState.waiting_for_confirmation)
async def cancel_unban_user(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not callback.from_user or not callback.message:
        return
        
    await state.clear()
    
    keyboard = get_ban_management_keyboard(callback.from_user.id)
    await callback.message.edit_text("‚ùå –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=keyboard)
    await callback.answer("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


# –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

@router.callback_query(F.data == "admin_banned_list")
async def callback_banned_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not callback.from_user or not callback.message:
        return
        
    user_id = callback.from_user.id
    
    banned_users = get_banned_users_list()
    
    if not banned_users:
        banned_text = "‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    else:
        banned_text = f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(banned_users)}):\n\n"
        
        for banned_id in banned_users:
            user_info = get_user_info(banned_id)
            if user_info:
                username = user_info.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                first_name = user_info.get('first_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                banned_text += f"üë§ {banned_id} (@{username}) - {first_name}\n"
            else:
                banned_text += f"üë§ {banned_id} (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)\n"
    
    keyboard = get_ban_management_keyboard(user_id)
    await callback.message.edit_text(banned_text, reply_markup=keyboard)
    await callback.answer()


# –°—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

@router.message(Command("admin_clear_user"), AdminFilter())
async def cmd_admin_clear_user(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_clear_user - –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞)"""
    if not message.from_user or not message.text:
        return
        
    user_id = message.from_user.id
    log_command_usage(user_id, "admin_clear_user")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split()
        if len(command_parts) < 2:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                "–ü—Ä–∏–º–µ—Ä: /admin_clear_user 12345"
            )
            return
        
        target_user_id = int(command_parts[1])
        
        # –û—á–∏—â–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if clear_user_favorites(target_user_id):
            await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ—á–∏—â–µ–Ω—ã")
        else:
            await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"Error clearing user data: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
